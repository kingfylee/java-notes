执行sql脚本文件:
    mysql –uroot –p123456 -Dtest < /tmp/ss.sql
    进入mysql内:source /tmp/ss.sql

索引
    B树（B-Tree）
        B-Tree为系统最优化大块数据的读和写操作
        B-Tree算法减少定位记录时所经历的中间过程，从而加快存取速度
        所有叶节点具有相同的深度，等于树高h
    B+树（B+Tree）
        只有叶节点才存储数据（数据存放的更加紧密，具有更好的空间局部性）
        在B+Tree的每个叶子节点包含一个指向相邻叶子节点的指针（对整棵树的便利只需要一次线性遍历叶子结点即可）

    索引建立原则
        最左前缀匹配原则
            查询条件中的所有字段需要从左边起按顺序出现在多列索引中，查询条件的字段数要小于等于多列索引的字段数，中间字段不能存在范围查询的字段(<,like等)，这样的sql可以使用该多列索引。
        =和in可以乱序
            mysql的查询优化器会帮你优化成索引可以识别的形式
        尽量选择区分度高的列作为索引
            区分度的公式是count(distinct col)/count(*)
        索引列不要参与计算
            b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，成本太大


    B+Tree索引的查询类型
        全值匹配
        匹配最左前缀
        匹配列前缀(可用用like a%,但不能使用like %b)
        匹配范围值
        精确匹配某一列和和范围匹配另外一列


mysqld 优化：
     启用 MySQL 慢速查询日志
        my.cnf 中配置
            ; enable the slow query log, default 10 seconds
            log-slow-queries
            ; log queries taking longer than 5 seconds
            long_query_time = 5
            ; log queries that don't use indexes even if they take less than long_query_time
            ; MySQL 4.1 and newer only
            log-queries-not-using-indexes

     监视查询缓存
        查询缓存的统计信息：SHOW STATUS LIKE 'qcache%';
        变量说明：
            Qcache_free_blocks	    缓存中相邻内存块的个数。数目大说明可能有碎片。FLUSH QUERY CACHE 会对缓存中的碎片进行整理，从而得到一个空闲块。
            Qcache_free_memory	    缓存中的空闲内存。
            Qcache_hits	            每次查询在缓存中命中时就增大。
            Qcache_inserts	        每次插入一个查询时就增大。命中次数除以插入次数就是不中比率；用 1 减去这个值就是命中率。在上面这个例子中，大约有 87% 的查询都在缓存中命中。
            Qcache_lowmem_prunes	缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看；如果这个数字在不断增长，就表示可能碎片非常严重，或者内存很少。（上面的 free_blocks 和 free_memory 可以告诉您属于哪种情况）。
            Qcache_not_cached	    不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句。
            Qcache_queries_in_cache	当前缓存的查询（和响应）的数量。
            Qcache_total_blocks	    缓存中块的数量。

     确保系统负载不会导致资源耗尽
        my.cnf 中配置
            set-variable=max_connections=500
            set-variable=wait_timeout=10
            max_connect_errors = 100

     缓冲区和缓存
         /etc/mysqld.conf
            table_cache     指定表缓存
         my.cnf
            thread_cache    指定线程缓存

        显示打开表的活动：SHOW STATUS LIKE 'open%tables';
            Open_tables     打开的表
            Opened_tables   需要打开的表。快速增加，就说明缓存命中率不够
        显示线程使用统计信息：SHOW STATUS LIKE 'threads%';
            Threads_created 每次创建一个新线程时，这个值都会增加
        确定关键字效率：show status like '%key_read%';
            Key_reads           命中磁盘的请求个数
            Key_read_requests   总数
        确定临时表的使用：SHOW STATUS LIKE 'created_tmp%';
            Created_tmp_tables      每次使用临时表都会增大
            Created_tmp_disk_tables 基于磁盘的表也会增大
            Created_tmp_files

     会话设置
        显示排序统计信息：SHOW STATUS LIKE "sort%";
            sort_merge_passes 过大，就需要注意 sort_buffer_size 的配置
        确定表扫描比率：SHOW STATUS LIKE "com_select"; SHOW STATUS LIKE "handler_read_rnd_next";
            Handler_read_rnd_next / Com_select 得出了表扫描比率
