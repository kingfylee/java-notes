OO基础
    抽象 封装 多态 继承

OO原则
    封装变化
    多用组合，少用继承
    针对接口编程，而不是针对实现变成
    为了对象之间的松耦合设计而努力
    类应该对扩展开放，对修改关闭
    要依赖抽象，不要依赖具体类
        依赖倒置：依赖不在是由上而下了，高层和底层都依赖与同一抽象
        遵循原则：
            变量不可以持有具体类的引用
            不要让类派生自具体类
            不要覆盖基类中已实现的方法
    最少知识原则：只和你的密友谈话
    别调用我们，我们会调用你（高层组件决定什么时候调用底层组件和怎样使用这些底层组件）


OO模式
    1.策略模式
        定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客人。

    2.观察者模式
        定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的依赖者都会收到通知并自动更新。

    3.装饰着模式
        动态地将责任附加道对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。

    4.工厂方法模式
        定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类的实例化推迟到了子类。

    5.抽象工厂模式
        提供了一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。

    6.单例模式
        确保一个类只有一个实例，并提供一个全局的访问点。

    7.命令模式
        将“请求”封装起来，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持撤销的操作。

    8.适配器模式
        将一个类的接口，转换成客户期望的另一个接口。适配器让原本的接口不兼容的类可以合作无间。

    9.外观模式
        提供了一个统一的接口，用来访问子系统中一群接口。外观定义了一个高层接口，让子系统更容易使用。

    10.模板方法模式
        在一个方法中定义了一个方法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。